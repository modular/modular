load("//bazel:config.bzl", "SUPPORTED_GPUS")

package(default_visibility = ["//visibility:public"])

constraint_setting(name = "gpu_bool")

constraint_value(
    name = "has_gpu",
    constraint_setting = ":gpu_bool",
)

constraint_setting(name = "multi_gpu_bool")

constraint_value(
    name = "has_multi_gpu",
    constraint_setting = ":multi_gpu_bool",
)

constraint_setting(name = "multi_gpu_4_bool")

constraint_value(
    name = "has_4_gpus",
    constraint_setting = ":multi_gpu_4_bool",
)

constraint_setting(name = "gpu_brand")

constraint_value(
    name = "amd_gpu",
    constraint_setting = ":gpu_brand",
    tags = ["maybe-unused"],
)

constraint_value(
    name = "nvidia_gpu",
    constraint_setting = ":gpu_brand",
)

constraint_setting(name = "gpu_name")

[
    constraint_value(
        name = "{}_gpu".format(gpu),
        constraint_setting = ":gpu_name",
        tags = ["maybe-unused"],
    )
    for gpu, _, _ in SUPPORTED_GPUS
]

config_setting(
    name = "asan",
    tags = ["maybe-unused"],
    values = {"features": "asan"},
)

config_setting(
    name = "ubsan",
    tags = ["maybe-unused"],
    values = {"features": "ubsan"},
)

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

alias(
    name = "lint",
    actual = "//bazel/lint",
    tags = ["top-level"],
)

alias(
    name = "format",
    actual = "//bazel/lint:fix",
    tags = ["top-level"],
)
