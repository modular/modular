diff --git a/mypy/private/mypy.bzl b/mypy/private/mypy.bzl
index b788973..a763694 100644
--- a/mypy/private/mypy.bzl
+++ b/mypy/private/mypy.bzl
@@ -187,8 +187,9 @@ def _mypy_impl(target, ctx):
     args.add("--output", output_file)
 
     result_info = [OutputGroupInfo(mypy = depset([output_file]))]
-    if ctx.attr.cache:
-        cache_directory = ctx.actions.declare_directory(ctx.rule.attr.name + ".mypy_cache")
+    is_executable = (target.files_to_run.executable != None)
+    if ctx.attr.cache and not is_executable:
+        cache_directory = ctx.actions.declare_file(ctx.rule.attr.name + ".mypy_cache.zip")
         args.add("--cache-dir", cache_directory.path)
 
         outputs = [output_file, cache_directory]
diff --git a/mypy/private/mypy_runner.py b/mypy/private/mypy_runner.py
index 2fadcba..4ca3c9a 100644
--- a/mypy/private/mypy_runner.py
+++ b/mypy/private/mypy_runner.py
@@ -5,6 +5,7 @@ import os
 import shutil
 import sys
 import tempfile
+import zipfile
 from typing import Any, Generator, Optional
 
 import mypy.api
@@ -15,20 +16,9 @@ def _merge_upstream_caches(cache_dir: str, upstream_caches: list[str]) -> None:
     current = pathlib.Path(cache_dir)
     current.mkdir(parents=True, exist_ok=True)
 
-    for upstream_dir in upstream_caches:
-        upstream = pathlib.Path(upstream_dir)
-
-        # TODO(mark): maybe there's a more efficient way to synchronize the cache dirs?
-        for dirpath_str, _, filenames in os.walk(upstream.as_posix()):
-            dirpath = pathlib.Path(dirpath_str)
-            relative_dir = dirpath.relative_to(upstream)
-            for file in filenames:
-                upstream_path = dirpath / file
-                target_path = current / relative_dir / file
-                if not target_path.parent.exists():
-                    target_path.parent.mkdir(parents=True)
-                if not target_path.exists():
-                    shutil.copy(upstream_path, target_path)
+    for upstream_zip in upstream_caches:
+        with zipfile.ZipFile(upstream_zip, "r") as zip_ref:
+            zip_ref.extractall(current)
 
     # missing_stubs is mutable, so remove it
     missing_stubs = current / "missing_stubs"
@@ -47,13 +37,16 @@ def managed_cache_dir(
     Otherwise, returns a temporary directory that will be cleaned up when the resource
     is released.
     """
+    tmpdir = tempfile.TemporaryDirectory()
+    _merge_upstream_caches(tmpdir.name, list(upstream_caches))
+    yield tmpdir.name
     if cache_dir:
-        _merge_upstream_caches(cache_dir, list(upstream_caches))
-        yield cache_dir
-    else:
-        tmpdir = tempfile.TemporaryDirectory()
-        yield tmpdir.name
-        tmpdir.cleanup()
+        with zipfile.ZipFile(cache_dir, "w") as zipf:
+            for root, _, files in os.walk(tmpdir.name):
+                for file in files:
+                    file_path = pathlib.Path(root) / file
+                    zipf.write(file_path, file_path.relative_to(tmpdir.name))
+    tmpdir.cleanup()
 
 
 def run_mypy(
