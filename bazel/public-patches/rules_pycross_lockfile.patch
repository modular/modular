diff --git a/pycross/private/bzlmod/environments.bzl b/pycross/private/bzlmod/environments.bzl
index 641dbd1..ad5548c 100644
--- a/pycross/private/bzlmod/environments.bzl
+++ b/pycross/private/bzlmod/environments.bzl
@@ -1,5 +1,6 @@
 """The environments extension creates target environment definitions."""

+load("@bazel_features//:features.bzl", "bazel_features")
 load(
     "@rules_pycross_internal//:defaults.bzl",
     default_glibc_version = "glibc_version",
@@ -25,6 +26,10 @@ def _environments_impl(module_ctx):
                 macos_version = tag.macos_version or default_macos_version,
             )

+    if bazel_features.external_deps.extension_metadata_has_reproducible:
+        return module_ctx.extension_metadata(reproducible = True)
+    return module_ctx.extension_metadata()
+
 environments = module_extension(
     doc = "Create target environments.",
     implementation = _environments_impl,
diff --git a/pycross/private/bzlmod/lock_file.bzl b/pycross/private/bzlmod/lock_file.bzl
index 9390b14..29101ad 100644
--- a/pycross/private/bzlmod/lock_file.bzl
+++ b/pycross/private/bzlmod/lock_file.bzl
@@ -1,5 +1,6 @@
 """The lock_file_repo extension creates repositories for an original-style Pycross .bzl lock."""

+load("@bazel_features//:features.bzl", "bazel_features")
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")
 load("//pycross/private:internal_repo.bzl", "exec_internal_tool")
 load("//pycross/private:lock_file_repo.bzl", "pycross_lock_file_repo")
@@ -31,6 +32,10 @@ def _lock_file_impl(module_ctx):
             # Create the packages repo
             pycross_lock_file_repo(name = tag.name, lock_file = tag.lock_file)

+    if bazel_features.external_deps.extension_metadata_has_reproducible:
+        return module_ctx.extension_metadata(reproducible = True)
+    return module_ctx.extension_metadata()
+
 # Tag classes
 _instantiate_tag = tag_class(
     doc = "Create a repo given the Pycross-generated lock file.",
diff --git a/pycross/private/bzlmod/pycross.bzl b/pycross/private/bzlmod/pycross.bzl
index 59a1412..6ddc1ff 100644
--- a/pycross/private/bzlmod/pycross.bzl
+++ b/pycross/private/bzlmod/pycross.bzl
@@ -1,5 +1,6 @@
 """Pycross internal deps."""

+load("@bazel_features//:features.bzl", "bazel_features")
 load("//pycross/private:internal_repo.bzl", "create_internal_repo")
 load("//pycross/private:pycross_deps.lock.bzl", pypi_all_repositories = "repositories")
 load("//pycross/private:pycross_deps_core.lock.bzl", core_files = "FILES")
@@ -60,6 +61,10 @@ def _pycross_impl(module_ctx):
         **(environments_attrs | toolchains_attrs)
     )

+    if bazel_features.external_deps.extension_metadata_has_reproducible:
+        return module_ctx.extension_metadata(reproducible = True)
+    return module_ctx.extension_metadata()
+
 pycross = module_extension(
     doc = "Configure rules_pycross.",
     implementation = _pycross_impl,
diff --git a/pycross/private/bzlmod/toolchains.bzl b/pycross/private/bzlmod/toolchains.bzl
index ae994a5..f989c58 100644
--- a/pycross/private/bzlmod/toolchains.bzl
+++ b/pycross/private/bzlmod/toolchains.bzl
@@ -1,5 +1,6 @@
 """Internal extension to create pycross toolchains."""

+load("@bazel_features//:features.bzl", "bazel_features")
 load(
     "@rules_pycross_internal//:defaults.bzl",
     "register_toolchains",
@@ -28,6 +29,10 @@ def _toolchains_impl(module_ctx):
             else:
                 _empty_repo(name = tag.name)

+    if bazel_features.external_deps.extension_metadata_has_reproducible:
+        return module_ctx.extension_metadata(reproducible = True)
+    return module_ctx.extension_metadata()
+
 toolchains = module_extension(
     doc = "Create toolchains.",
     implementation = _toolchains_impl,
