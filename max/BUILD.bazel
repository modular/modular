load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("//bazel:api.bzl", "modular_genrule", "modular_nanobind_extension", "modular_py_binary", "modular_py_library", "modular_python_binding_py_library", "requirement")

modular_nanobind_extension(
    name = "_core.bindings",
    srcs = ["_core.cpp"],
    declare_py_library = False,
    module_name = "_core",
    nanobind_deps = [
        "//SDK/lib/API/python/max/_core/src:modules",
    ],
    new_link_root = "lib",
    deps = [
        "@llvm-project//llvm:Support",
    ],
)

# Intermediate targets just for stubgen
modular_py_library(
    name = "_core.stubfile_generator_library",
    data = [":_core.bindings"],
    imports = [".."],
)

modular_py_binary(
    name = "_core.stubfile_generator",
    srcs = ["@nanobind//:src/stubgen.py"],
    tags = ["no-mypy"],
    deps = ["_core.stubfile_generator_library"],
)

stubfiles = ["stubfiles/_core.pyi"] + [
    "stubfiles/" + dir + "/__init__.pyi"
    for dir in (
        "profiler",
        "graph",
        "engine",
        "dtype",
        "driver",
        "dialects",
        "dialects/builtin",
        "dialects/kgen",
        "dialects/m",
        "dialects/mo",
        "dialects/mosh",
    )
]

modular_genrule(
    name = "_core.stubfiles",
    srcs = [
        ":patterns.nb",
        # To ensure our linting + formatting aligns with the rest of our project
        "//:pyproject.toml",
    ],
    outs = stubfiles,
    cmd = """
    set -e
    # When profiling is enabled, it replaces the bound methods entirely, which causes weird things to
    # happen with the stubfiles. Avoid the issue entirely by just forcing it off when generating.
    export MODULAR_ENABLE_PROFILING=OFF

    export folder=$(dirname $(location stubfiles/_core.pyi))
    $(execpath {stubgen}) -r -m max._core -O $folder -p $(location :patterns.nb) --include-private --quiet

    # Add copyright headers
    header="
# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# GENERATED FILE, DO NOT EDIT MANUALLY!
# ===----------------------------------------------------------------------=== #
"
    for file in $(find $folder -name *.pyi); do
        echo "$header\n$(cat $file)" > $file
    done

    # Lint and format the files
    BUILD_WORKSPACE_DIRECTORY=$folder $(execpath {ruff}) format --exclude {excludes} --quiet
    BUILD_WORKSPACE_DIRECTORY=$folder $(execpath {ruff}) check --fix --exclude {excludes} --quiet
    """.format(
        excludes = "dialects/m/__init__.pyi,dialects/mo/__init__.pyi,dialects/mosh/__init__.pyi,dialects/builtin/__init__.pyi,dialects/kgen/__init__.pyi",
        ruff = "//utils/bazel/lint:ruff-wrapper",
        stubgen = ":_core.stubfile_generator",
    ),
    tools = [
        "_core.stubfile_generator",
        "//utils/bazel/lint:ruff-wrapper",
    ],
)

modular_python_binding_py_library(
    name = "_core",
    srcs = glob([
        "_core/*.pyi",
        "_core_types/*.py",
    ]),
    bindings_data = [":_core.bindings"],
    imports = [".."],
    deps = [
        "//SDK/lib/API/python/max/mlir",
        requirement("numpy"),
    ],
)

# Compare the generated stubs to the committed ones.
# We commit the changes for a few reasons:
# 1. It is easier to see when they change
# 2. For other tooling that uses them, such as docs or (perhaps in the future) copybara.
# We can also select which ones to commit, if some of the generated ones are not to our
# liking, since we don't directly depend on any of the generated ones.

# Can run `./utils/sync-stubfiles.py` to sync the committed ones to the generated ones.
[
    diff_test(
        name = name + ".diff_test",
        file1 = "//SDK/lib/API/python/max:stubfiles/{}/__init__.pyi".format(name),
        file2 = "_core/{}.pyi".format(name),
    )
    for name in (
        "driver",
        "dtype",
        "graph",
        "engine",
        "profiler",
    )
]

diff_test(
    name = "_core.diff_test",
    file1 = "//SDK/lib/API/python/max:stubfiles/_core.pyi",
    file2 = "_core/__init__.pyi",
)

modular_py_library(
    name = "max",
    srcs = [],
    deps = [
        ":_core",
        "//SDK/lib/API/python/max/driver",
        "//SDK/lib/API/python/max/dtype",
        "//SDK/lib/API/python/max/engine",
        "//SDK/lib/API/python/max/entrypoints",
        "//SDK/lib/API/python/max/graph",
        "//SDK/lib/API/python/max/mlir",
        "//SDK/lib/API/python/max/nn",
        "//SDK/lib/API/python/max/pipelines",
        "//SDK/lib/API/python/max/pipelines/architectures",
        "//SDK/lib/API/python/max/profiler",
        "//SDK/lib/API/python/max/serve",
    ],
)
