load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("//bazel:api.bzl", "modular_genrule", "modular_nanobind_extension", "modular_py_binary", "modular_py_library", "requirement")
load("//bazel:config.bzl", "TOP_LEVEL_TAG")

modular_nanobind_extension(
    name = "_core.bindings",
    srcs = ["_core.cpp"],
    module_name = "_core",
    new_link_root = "../modular/lib",
    deps = [
        "//SDK/lib/API/python/max/_core/src:modules",
        "@llvm-project//llvm:Support",
    ],
)

# Intermediate targets just for stubgen
modular_py_library(
    name = "_core.stubfile_generator_library",
    data = [
        ":_core.bindings",
    ],
    imports = [".."],
    deps = [
        "//SDK/lib/API/python/max/mlir",
    ],
)

modular_py_binary(
    name = "_core.stubfile_generator",
    srcs = ["@nanobind//:src/stubgen.py"],
    main = "@nanobind//:src/stubgen.py",
    tags = ["no-mypy"],
    deps = ["_core.stubfile_generator_library"],
)

stubfiles = glob(["**/*.pyi"])

modular_genrule(
    name = "_core.stubfiles",
    testonly = True,
    srcs = [
        ":patterns.nb",
        # To ensure our linting + formatting aligns with the rest of our project
        "//:pyproject.toml",
    ],
    outs = [("stubfiles/" + file) for file in stubfiles],
    cmd = """
    set -e
    # When profiling is enabled, it replaces the bound methods entirely, which causes weird things to
    # happen with the stubfiles. Avoid the issue entirely by just forcing it off when generating.
    export MODULAR_ENABLE_PROFILING=OFF
    export BAZEL_TEST=1

    export folder=$(dirname $(location stubfiles/_core/dtype.pyi))
    $(execpath {stubgen}) -r -m max._core -O $folder/.. -p $(location :patterns.nb) --include-private --quiet

    # Add copyright headers
    header="
# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# GENERATED FILE, DO NOT EDIT MANUALLY!
# ===----------------------------------------------------------------------=== #
"
    for file in $(find $folder -name *.pyi); do
        echo "$header\n$(cat $file)" > $file
    done

    # Lint and format the files
    BUILD_WORKSPACE_DIRECTORY=$folder $(execpath {ruff}) fix
    """.format(
        ruff = "//open-source/max/bazel/lint:ruff-wrapper",
        stubgen = ":_core.stubfile_generator",
    ),
    tools = [
        "_core.stubfile_generator",
        "//open-source/max/bazel/lint:ruff-wrapper",
    ],
)

modular_py_library(
    name = "_core",
    srcs = glob(["_core_types/*.py"]),
    data = [":_core.bindings"],
    imports = [".."],
    pyi_srcs = stubfiles,
    deps = [
        "//SDK/lib/API/python/max/mlir",
        requirement("numpy"),
    ],
)

# Compare the generated stubs to the committed ones.
# We commit the changes for a few reasons:
# 1. It is easier to see when they change
# 2. For other tooling that uses them, such as docs or (perhaps in the future) copybara.

write_source_files(
    name = "sync-stubfiles",
    additional_update_targets = ["//SDK/lib/API/python/max/_mlir/_mlir_libs:sync-stubfiles"],
    diff_test_failure_message = """
        A stubfile is out of sync with its generated counterpart.
        If you modified just a .pyi file, you need to modify the corresponding .cpp file instead.
        When you modify a .cpp file in the _core/src directory, you can run
        `./utils/sync-stubfiles.py` and commit the results.
        """,
    files = {file: ":stubfiles/" + file for file in stubfiles},
    tags = [
        TOP_LEVEL_TAG,
        "stubfiles",
    ],
)

modular_py_library(
    name = "max",
    srcs = [],
    deps = [
        ":_core",
        "//SDK/lib/API/python/max/_core_mojo",
        "//SDK/lib/API/python/max/driver",
        "//SDK/lib/API/python/max/dtype",
        "//SDK/lib/API/python/max/engine",
        "//SDK/lib/API/python/max/entrypoints",
        "//SDK/lib/API/python/max/entrypoints:gpu-query",
        "//SDK/lib/API/python/max/entrypoints:pipelines",
        "//SDK/lib/API/python/max/entrypoints:replay_recording",
        "//SDK/lib/API/python/max/experimental",
        "//SDK/lib/API/python/max/graph",
        "//SDK/lib/API/python/max/interfaces",
        "//SDK/lib/API/python/max/mlir",
        "//SDK/lib/API/python/max/nn",
        "//SDK/lib/API/python/max/pipelines",
        "//SDK/lib/API/python/max/pipelines/architectures",
        "//SDK/lib/API/python/max/profiler",
        "//SDK/lib/API/python/max/serve",
        "//SDK/lib/API/python/max/support",
        "//SDK/lib/API/python/max/torch",
    ],
)
