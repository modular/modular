# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
from __future__ import annotations

from enum import Enum
from pathlib import Path
from typing import Any, List, Mapping, Optional, Union

from max._driver import Device
from max.driver.core import Tensor as TensorImpl
from max.dtype.core import DType

InputShape = Optional[List[Union[int, str, None]]]
CustomExtensionType = Union[str, Path, Any]
CustomExtensionsType = Union[List[CustomExtensionType], CustomExtensionType]

class FrameworkFormat(Enum):
    max_graph = ...
    torchscript_module = ...
    torchscript_function = ...
    torch_mlir = ...

class Model:
    num_inputs: int
    num_outputs: int
    input_metadata: List[TensorSpec]
    output_metadata: List[TensorSpec]

    def load(self, weights_registry: Mapping[str, Any]) -> None: ...
    def execute(self, **kwargs) -> dict[str, Any]: ...
    def execute_device_tensors(
        self, *tensors: List[TensorImpl | "MojoValue"]
    ) -> List[TensorImpl]: ...
    def _export_mef(self, path): ...
    @property
    def devices(self) -> List[Device]: ...
    @property
    def input_devices(self) -> List[Device]: ...
    @property
    def output_devices(self) -> List[Device]: ...

class InferenceSession:
    def __init__(self, config: dict = ...) -> None: ...
    def compile_from_path(
        self, model_path: Path, config: dict = ...
    ) -> Model: ...
    def compile_from_object(
        self, model, format: FrameworkFormat, config: dict = ...
    ) -> Model: ...
    def _get_torch_custom_op_schemas(self) -> List[str]: ...
    @property
    def stats_report(self) -> str: ...
    def reset_stats_report(self) -> None: ...
    def set_debug_print_options(
        self, style: PrintStyle, precision: int, directory: str
    ) -> None: ...
    def set_mojo_define(self, key: str, value: bool | int | str) -> None: ...
    @property
    def devices(self) -> List[Device]: ...

class TensorSpec:
    shape: List[int]
    dtype: DType
    name: str
    def __init__(self, shape: InputShape, dtype: DType, name: str): ...

class TorchInputSpec:
    shape: InputShape
    dtype: DType
    device: str
    def __init__(self, shape: InputShape, dtype: DType, device: str = ...): ...

class TensorData:
    def __init__(self, ptr: int, shape: List[int], dtype: DType): ...

class MojoValue:
    pass

class PrintStyle(Enum):
    BINARY = ...
    BINARY_MAX_CHECKPOINT = ...
    COMPACT = ...
    FULL = ...
    NONE = ...

__version__: str
