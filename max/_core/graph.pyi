# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# GENERATED FILE, DO NOT EDIT MANUALLY!
# ===----------------------------------------------------------------------=== #

import os
import pathlib
from collections.abc import Sequence

from numpy.typing import ArrayLike

# isort: off
from max._mlir._mlir_libs._mlir import MlirOperation  # type: ignore[attr-defined]
from max._mlir._mlir_libs._mlir import MlirContext  # type: ignore[attr-defined]
from max._mlir._mlir_libs._mlir import MlirAttribute  # type: ignore[attr-defined]
from max._mlir._mlir_libs._mlir import MlirType  # type: ignore[attr-defined]
from max._mlir._mlir_libs._mlir import MlirLocation  # type: ignore[attr-defined]
from max._mlir._mlir_libs._mlir import MlirModule  # type: ignore[attr-defined]
from max._mlir._mlir_libs._mlir import MlirDialectRegistry  # type: ignore[attr-defined]
# isort: on

def load_modular_dialects(arg: MlirDialectRegistry, /) -> None: ...
def weights_attr(
    arg0: str | os.PathLike, arg1: int, arg2: MlirType, arg3: str, /
) -> MlirAttribute: ...
def array_attr(
    arg0: str, arg1: ArrayLike, arg2: MlirType, /
) -> MlirAttribute: ...
def dim_param_decl_attr(arg0: MlirContext, arg1: str, /) -> MlirAttribute: ...
def dim_param_decl_array_attr(
    arg0: MlirContext, arg1: Sequence[MlirAttribute], /
) -> MlirAttribute: ...
def shape_attr(
    arg0: MlirContext, arg1: Sequence[MlirAttribute], /
) -> MlirAttribute: ...
def device_attr(
    arg0: MlirContext, arg1: str, arg2: int, /
) -> MlirAttribute: ...
def device_attr_get_label(arg: MlirAttribute, /) -> str: ...
def device_attr_get_id(arg: MlirAttribute, /) -> int: ...
def dtype_type(arg0: MlirContext, arg1: str, /) -> MlirType: ...
def tensor_type(
    arg0: MlirContext, arg1: MlirType, arg2: Sequence[MlirAttribute], /
) -> MlirType: ...
def tensor_type_with_device(
    arg0: MlirContext,
    arg1: MlirType,
    arg2: Sequence[MlirAttribute],
    arg3: MlirAttribute,
    /,
) -> MlirType: ...
def tensor_type_get_dtype(arg: MlirType, /) -> str: ...
def tensor_type_get_rank(arg: MlirType, /) -> int: ...
def tensor_type_get_dim(arg0: MlirType, arg1: int, /) -> MlirAttribute: ...
def tensor_type_get_device(arg: MlirType, /) -> MlirAttribute | None: ...
def buffer_type(
    arg0: MlirContext, arg1: MlirType, arg2: Sequence[MlirAttribute], /
) -> MlirType: ...
def buffer_type_with_device(
    arg0: MlirContext,
    arg1: MlirType,
    arg2: Sequence[MlirAttribute],
    arg3: MlirAttribute,
    /,
) -> MlirType: ...
def buffer_type_get_dtype(arg: MlirType, /) -> str: ...
def buffer_type_get_rank(arg: MlirType, /) -> int: ...
def buffer_type_get_dim(arg0: MlirType, arg1: int, /) -> MlirAttribute: ...
def buffer_type_get_device(arg: MlirType, /) -> MlirAttribute | None: ...
def static_dim(arg0: MlirContext, arg1: int, /) -> MlirAttribute: ...
def symbolic_dim(arg0: MlirContext, arg1: str, /) -> MlirAttribute: ...
def algebraic_dim(
    arg0: MlirContext, arg1: int, arg2: MlirAttribute, arg3: MlirAttribute, /
) -> MlirAttribute: ...
def is_symbolic_dim(arg: MlirAttribute, /) -> bool: ...
def is_algebraic_dim(arg: MlirAttribute, /) -> bool: ...
def is_static_dim(arg: MlirAttribute, /) -> bool: ...
def static_dim_value(arg: MlirAttribute, /) -> int: ...
def symbolic_dim_name(arg: MlirAttribute, /) -> str: ...
def algebraic_dim_opcode(arg: MlirAttribute, /) -> int: ...
def algebraic_dim_operands(arg: MlirAttribute, /) -> list[MlirAttribute]: ...
def type_is_tensor(arg: MlirType, /) -> bool: ...
def type_is_opaque(arg: MlirType, /) -> bool: ...
def type_is_buffer(arg: MlirType, /) -> bool: ...
def opaque_type(arg0: MlirContext, arg1: str, /) -> MlirType: ...
def opaque_type_name(arg: MlirType, /) -> str: ...
def frame_loc(arg0: MlirContext, arg1: object, /) -> MlirLocation: ...
def get_frame(arg: MlirLocation, /) -> object: ...
def graph(
    arg0: MlirModule, arg1: MlirLocation, arg2: str, arg3: MlirType, /
) -> MlirOperation: ...

class Analysis:
    def __init__(
        self, arg0: object, arg1: Sequence[str | os.PathLike], /
    ) -> None: ...
    @property
    def symbol_names(self) -> list[str]: ...
    @property
    def library_paths(self) -> list[pathlib.Path]: ...
    def kernel(self, arg: str, /) -> MlirOperation: ...
    def verify_custom_op(self, arg: MlirOperation, /) -> None: ...
    def add_path(self, arg: str | os.PathLike, /) -> None: ...
