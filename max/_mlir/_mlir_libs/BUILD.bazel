load("//bazel:api.bzl", "copy_files", "modular_generate_stubfiles", "modular_nanobind_extension")

package(default_visibility = ["//visibility:public"])

copy_files(
    name = "py_srcs",
    srcs = ["@llvm-project//mlir/python:MlirLibsPyFiles"],
    outs = ["__init__.py"],
)

modular_nanobind_extension(
    name = "_mlir.bindings",
    srcs = ["//:nanobind_mlir_srcs"],
    local_defines = [
        # Set definition used in Interop.h to prefix the MLIR package.
        "MLIR_PYTHON_PACKAGE_PREFIX=max._mlir.",
    ],
    module_name = "_mlir",
    new_link_root = "../../../modular/lib",
    # Don't lint these files, they're from LLVM.
    tags = ["no-clang-tidy"],
    deps = [
        "//:MLIRBindingsPythonHeaders",
        "//SDK:max",
    ],
)

modular_generate_stubfiles(
    name = "_mlir",
    srcs = [":py_srcs"],
    diff_test_failure_message = """
A stubfile is out of sync with its generated counterpart.
This is likely to occur when bumping LLVM, you can run
`./utils/sync-stubfiles.py` and commit the results.
""",
    extension = ":_mlir.bindings",
    full_name = "max._mlir._mlir_libs._mlir",
    header = """
# ===----------------------------------------------------------------------=== #
# GENERATED FILE, DO NOT EDIT MANUALLY!
# ===----------------------------------------------------------------------=== #
""",
    imports = ["../../.."],
    pyi_srcs = glob(["**/*.pyi"]),
    tags = ["no-mypy"],
)
